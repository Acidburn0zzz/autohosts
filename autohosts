#!/bin/bash

VERSION=2.0.1

# get the non-root user, so we can add the custom filters for them
REGUSER=$(last | grep "logged in" | grep -o '^\S*')

# check os type for home directory path
if [[ "$OSTYPE" != "darwin"* ]];
then
  HOME_USER="/home/$REGUSER/autohosts/"
else
  # macos
  HOME_USER="/Users/$REGUSER/autohosts/"
fi

# initialize reusable stuff, to make the terminal results prettier
function croncheck() {
  crontab -l | grep -q 'autohosts' && EXIST=1 || EXIST=0
}

function green() {
  echo -e "\e[32m$1\e[0m"
}

function red() {
  echo -e "\e[0;31m$1\e[0m"
}

function brown() {
  echo -e "\e[0;33m$1\e[0m"
}

function purple() {
  echo -e "\e[0;35m$1\e[0m"
}

if [[ $EUID -ne 0 ]]; then
  red "This script must be ran as root, or with sudo privileges."
  exit 1
fi

### setup ###
# if this is the first run, move to appropriate directory and set a config file
if [ ! -e /etc/autohosts.conf ];
then

  # move the script to /usr/bin so it can be executed as an alias
  if [ -f ./autohosts ] && [ ! -f /usr/bin/autohosts ];
  then
    green "Creating an alias for autohosts.."
    cp autohosts /usr/bin/ && chmod +x /usr/bin/autohosts
  fi

  # migrate custom filters file to the user's home directory
  if [ -f custom_filters ] && [ ! -d "$HOME_USER" ];
  then
    green "Creating custom filters directory for $REGUSER"
    mkdir "$HOME_USER" && cp custom_filters "$HOME_USER" && cp whitelist "$HOME_USER" && chown "$REGUSER:$REGUSER" -R "$HOME_USER"
  fi

  # double-check to ensure we don't have a conflicting cron
  croncheck

  if [ "$EXIST" == 0 ];
    then

      # if no cronjob exists, create one
      crontab -l | { cat; echo "22 19 * * 0 /usr/bin/autohosts > /dev/null 2>&1"; } | crontab -

      croncheck
      if [ "$EXIST" == 1 ];
      then
        green "Cronjob created..."
      else
        red "There was a problem creating the cronjob, you might have to create it manually!"
      fi

  fi

  # set a var that can be later referenced to see if the application has been configured already
  echo VERSION=$VERSION > /etc/autohosts.conf

  purple "Setup is complete!"

fi
### end setup ###

purple "== UPDATING =="
green "Obtaining hosts file from Steven Black's repo and LocalFigurez Firefox Telemetry filter..."

# check os type
if [[ "$OSTYPE" != "darwin"* ]];
then

  # not a mac, use wget
  wget https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts -O /etc/hosts
  # include LocalFigurez Firefox snooping list
  wget https://raw.githubusercontent.com/angela-d/autohosts/master/firefox-includes -O ->> /etc/hosts

else

  # mac.. use curl, instead
  curl -O https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts > /etc/hosts
  # append LocalFigurez Firefox snooping list
  curl https://raw.githubusercontent.com/angela-d/autohosts/master/firefox-includes >> /etc/hosts
fi


# check for and include any custom filters
if [ -e "$HOME_USER"custom_filters ];
then

  green "Processing custom filters..."
  cat "$HOME_USER"'custom_filters' >> /etc/hosts
else
  brown "No custom filters found at home_user, skipping..."
fi


# devdom: https://notabug.org/angela/devdom
green "Checking if devdom is installed (will execute devdom hosts update, if so)"

if [ -e /usr/bin/devdom ];
then
  devdom hosts
    green "devdom hosts have been appended..."
else
  brown "Devdom is not installed; skipping."
fi

# apply any whitelisted entries
if [ -s "$HOME_USER"whitelist ];
then

  for whitelist in $(cat "$HOME_USER"whitelist);
  do

    echo "$whitelist removed, per whitelist rule"
    sed -i "/$whitelist/d" /etc/hosts
  done
  wait
fi


# if this is a mac, refresh the dns cache
if [[ "$OSTYPE" == "darwin"* ]];
then
  killall -HUP mDNSResponder
fi


purple "Hosts update complete!"
